:PROPERTIES:
:ID: 2be96e32-2649-4416-956a-64cbb23a3f9e
:END:
#+TITLE: tech learning ladder

[[file:..][..]]

Timestamp: 2023-05-01

As a tech person, what might one learn?

That's a hard question.
Our industry is moving, and our tools are chaning.
And as we get better, the speed of change increases.

I don't presume to be able to find a final answer to this question.
I'll aim for:

1. Clarity
2. Then [[id:dfd45cfa-3154-47ef-8f74-06fe0e69715e][lindy compatibility]] (where possible)

* Technologist practice map

In practice, we deliver value.
What practices are useful for knowing?

- Ability to ship increments of working code in 15 minutes to two hours
  - *Context*.
    Given a level of individual expertise and codebase quality, it's possible to solve real problems and ship the solutions to master in 15 minutes to two hours.
    Why can I say this?
    Because I've seen it working with [[id:16f444c6-7311-4b95-9288-f878dd052ae4][Sindre]] and [[id:8833ff2f-ed66-4db2-ac14-6f8eff9f70d4][Oddmund]].
    See also [[https://www.youtube.com/watch?v=DyM4NtlIL44][Fred George talk about teams working in this rhythm]].
  - List of techniques that help enable shipping rapid increments.
    - Codebase is decoulpled and can be tested in isolation.
    - We have tests for our business logic, and are not struck by fear when making changes.
    - We have automated tests runnning elsewhere, and can see exactly which commits pass the tests.
    - We can iterate quickly on our code and our tests locally, writing new code and re-running the tests in ~10-15 seconds
    - We can spin up a local development environment in a few seconds
    - We are comfortable juding which changes are /safe/ to make
    - Our codebase are structured such that a significant amount of our changes are safe to make
    - We limit mutation in our codebase to where it is approperiate
    - We automate operational work
    - We are able to leverage feature flagging to limit work in progress (inventory) and to enable insight into the real system

* Technologist theory map

Here we go.

- *HTTP og servere*
  - Hva er en HTTP-request?
  - Headere
    - Accept
    - Content-Type
  - Body
  - HTTP-request med Curl
  - HTTP-request med js-fetch
  - Inspisere HTTP-requests i Firefox / Chrome
  - Skriv en HTTP-server i Go
    - Kjør den lokalt
    - Kjør den på nett
    - Hvordan serve HTML
    - Hvordan serve JSON
    - Hent ut headere
      - og skriv til logger
      - og skriv til body
      - sett andre headere med curl
  - ---
  - GraphQL
  - GRPC/protobuf
  - https://avro.apache.org/
  - Teknikker for serialisering og deserialisering når du mapper fra body (string) til typer i språket ditt.
- *Testing og andre teknikker for å vite om koden gjør den du tror den gjør*
  - Enhetstester
  - Hvordan kjører testene i CI?
  - ---
  - Integrasjonstester
  - Property testing
- *Utviklingsprosess*.
  - Hvordan spille andre gode.
    - Jeg er fersk, og jobber sammen med en erfaren utvikler.
      Hvordan kan jeg hjelpe grinebiteren å ha færre problemer i hverdagen?
    - Jeg er erfaren utvikler.
      Hvordan kan jeg hjelpe en nyansatt å gjøre en god jobb?
    - Hvordan kan jeg hjelpe en produktleder eller prosjektleder?
    - Produktledelse og teknologiledelse --- hvem skal jeg spørre?
    - Hvordan jobber jeg med en designer?
      - Hvordan shipper jeg det designeren har tegnet opp?
      - Interaksjonsdesign vs grafisk design.
  - Parprogrammering
  - PR-er
    - hvorfor+hvordan bruker vi PR-er i dette teamet?
      - unngå bugs?
      - lære / lære bort?
    - Hvor stor PR er dette?
      - Gjør du én ting eller mange ting?
      - Hvordan skrive kode for å kunne shippe mindre inkrementer.
    - er det mulig å skjønne hva du har gjort?
      - klarer du å uttrykke det konsist?
      - bør du inkludere bilder, figurer eventuelt en video?
        Github støtter opplasting av media rett i PR-beskrivelse.
    - hva ønsker du feedback på?
  - ---
  - Feature-flagging
  - Ensemble-programmering
  - Gradvis utrulling
- *Databaser og datamodellering*
  - hva er en database
    - state i database, ikke andre steder
      - https://12factor.net/
        - hva i 12factor bør vi være kritisk til?
    - databaser og miljøer
    - SQL 101
    - prøvekjøre med [[id:b79cec4e-13d3-451c-9577-dad732c31438][sqlite]] og [[id:7c092c90-0868-44a1-b17e-fcc5be10c1ce][sqlitebrowser]]
      - hvorfor?
        - kjempebra å bruke til å lære bort SQL.
          Håndfast, lett å installere, og du kan /se tabellene/.
  - Databaser på Iterapp
    - hvordan kommer du i gang?
      et eksempel du klarer å kjøre selv, der du lager en bitteliten app med DB som kan gjøre noe.
  - Migrations
  - ---
  - PostgreSQL-spesifikke ting vi bør vite om?
  - SQLite
  - Putting "non-obvious" stuff in the database
    - Assets
    - Cached things
  - /one database/ vs "We have PostgreSQL, Redis and an object store and we don't know where to put things"
  - tester og database.
    Hva kan vi gjøre?
    Får vi skrevet tester på kode som bruker databasen?
- *CSS*
  - Hva er en anbefalt måte å begynne å skrive CSS på?
- *React*
  - Hvordan går jeg fra
- *Sikkerhet*
  - Marcus shortlist
    - «Tokens»: https://paseto.io/
    - «Kryptering»: https://doc.libsodium.org/
    - «Passordhashing»: https://en.wikipedia.org/wiki/Argon2?wprov=sfti1
    - Neither of those three? Reconsider your approach.
    - Ensure you test your stuff /extensively/.
- *Unix og Unix-verktøy*
  - Editoren min - en investering.
  - Git
  - Terminal emulator and shell
    - Different shells: bash, zsh, fish, sh
      - GRML ZSH config: https://grml.org/zsh/
      - Shell start latencey
    - Terminal enulators on Mac: iterm (built-in), kitty, alacritty, iterm2, ...
  - ---
  - POSIX - the things you know will work.
  - Curl
  - jq
  - Environment variables
    - $USER
    - $HOME
    - $EDITOR
  - Command line arguments
  - Jobbe med filer
    - filer som stdin, stdout
    - temp-filer
    - "namespacing i filsystemer"
  - Små, skarpe verktøy
  - Pipes
    - hvordan bruke pipes til å koble sammen andre programmer
    - hvordan skrive egne programmer som funker godt med pipes
- *"Operations": Når appen din kjører i prod*
  - Feil og logging
    - Hvordan får du appen din i prod den første gangen?
      - Skriver du loggmeldinger som du klarer å lese?
    - Hvordan får du vite at noe ikke funker?
    - Structured logging.
      - hvilke felter bør du putte på JSON-loggene dine?
      - hvordan søker du i loggene?
      - https://www.elastic.co/kibana/
  - ---
  - Miljøer
    - Dev og prod
    - Eller dev og test og prod
      - hvordan bruker du test?
  - Docker
    - Hvordan skriver du en dockerfile?
    - Hvordan tester du om en dockerfile funker? (--entrypoint bash)
    - Dockerfiles til Iterapp
  - Github actions
  - Kubernetes
  - Backup og gjennoppretting av databasen

That's all for level 1.
Topics that can be postponed are put below the "fold" (the horizontal line)

-----

- Modularitet, API-design og systemdesign
  - Interfaces between modules
  - Typed interfaces in programming languages
    - Go: =interface=
    - Java: =interface=
    - Typescript: =interface=
    - Rust: =trait=
    - Haskell: =class= (typeclass)
    - Clojure: =protocol= (java =interface= also supported)
  - CQRS and event sourccing
  - Idempotence
  - Immutability
  - Teodor opinion /prefer shallow hierarchies/
    - build namespaces, not taxonomies.
  - Data and serialization.
    Cycles.
- *Functional programming.*
  - Types.
  - Data.
  - Pure functions.
  - System-level functional programming (eg using GET requests with immutability and caching)
- *Types and type systems.*
  - Types in object oriented languages
    - Go
    - Typescript
  - Types in functional languages
    - Elm
    - Haskell
    - Clojure
    - Elixir
    - F#
- *Declarative programming*
  - HTML
    - HTMX (https://htmx.org/)
  - SQL
  - Prolog
  - Minikanren
  - Datalog
- *Ytelse*
  - Allokering
  - Dataorientert programmering (tenk på hvordan minnet ditt funker)
  - Finn ut hva som er tregt med tracing
  - Hvordan ytelse påvirker brukeropplevelse
    - "300 ms"
    - https://danluu.com/input-lag/
  - Trege og raske CLI-verktøy -- og hvordan de er bygget
- *Mobilutvikling*
  - Flutter
  - React native

Spør etter: under hver kategori, hva bør vi gjøre?

Helst: så vi er klare for nyansatte i august.

teodor sammendrag

1. viktige spørsmål:
   1. hvordan skal vi bruke lista til å hjelpe nyansatte denne uka?
   2. hvordan skal vi bruke lista til å hjelpe de som starter i august?
2. skal vi bruke kateogriene til å holde oversikt over "artifacts" (feks sammendrag spillutvikling)?

lista er fin.
Spørsmålet er /"hva gjør vi nå???"/
