:PROPERTIES:
:ID: 2c53f531-afdd-4efb-becd-f5d2f220b5ab
:END:
#+TITLE: Transform documents with Pandoc and Clojure

[[./..][..]]

Today, we're going to use Pandoc and Clojure to produce a nice EDN file with all the links from an Markdown file.

* Motivation: general tools
I strive to learn to use general tools.
I want to be able to mix and combine my existing toolbox to new problems.
To achieve that, I'm willing to sacrifice some clarity and some control.

Pandoc and Clojure are general tools.
Pandoc supports a [[https://pandoc.org/MANUAL.html#general-options][wide range of document formats]].
Clojure is a great tool for general purpose programming.

Here's a list of more specific ways of solving adjacent problems:

1. Use a markdown library API to tramsform a markdown document
2. Use jsoup to transform HTML directly
3. Just write hiccup instead of a text format like Markdown or Org-mode so that you can work with plain data

Specific tools are often easier to get started with than general tools.
Doing something specific is also a great way to learn.
By minimizing indirection in what you do, you minimize your chance to get lost.

That's not what we're going to do today!
Today, we're aiming for general.

Let's get to it.
* Terminology
First, let's define the terminology we're going to use.

| Term          | Definition                                   | More details                         |
|---------------+----------------------------------------------+--------------------------------------|
| walk          | A way to transform recursive data structures | https://clojuredocs.org/clojure.walk |
| Pandoc filter | A program that can transform Pandoc JSON     | https://pandoc.org/filters.html      |
| Babashka      | Clojure runtime for scripting                | https://babashka.org/                |

Note: we could use plain Clojure instead of Babashka.
But Babashka is a good fit here because of fast startup time, easy STDIN/STDOUT transformation and builtin JSON support.
* Introduction to Pandoc
Pandoc provides a common document format abstraction, and transformation from/to a wide range of formats.
Let's look at an example.

** Converting markdown to HTML with Pandoc

Given =doc.md=:

#+INCLUDE: "doc.md" src markdown

We can call pandoc:

#+INCLUDE: "doc-html.sh" src bash

To produce =doc.html=:

#+INCLUDE: "doc.html" src html

** Markdown to JSON with Pandoc

Given =link.md=:

#+INCLUDE: "link.md" src markdown

We can call pandoc:

#+INCLUDE: "link-json.sh" src bash

To produce =link.json=:

#+INCLUDE: "link.json" src json
* Babashka as a pandoc filter
First, recap.

1. Pandoc can convert anything to JSON
2. We can transform JSON
3. Pandoc can convert anything from JSON.

So, how do we want to do this?
A Pandoc filter takes JSON on stdin and produces JSON on stdout.

We can use =jet= and =bb= do do this:

#+begin_src bash
echo '{"args": [1, 2]}' | \
    jet --from json | \
    bb '(assoc *input* :sum (reduce + (:args *input*)))' | \
    jet --to json
{"args":[1,2],"sum":0}
#+end_src

Nice!
* Implement the thing
So ...
I had the idea that I'd work this out incrementally, explaining here each step as I take it.
Unfortunately, that didn't happen.
So here's =rickroll.clj=, with a bit of annotation:

#+INCLUDE: "rickroll.clj" src clojure
