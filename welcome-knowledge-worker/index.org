:PROPERTIES:
:ID: 9c186247-2fe0-4c64-b2b8-5fc6dc110911
:END:
#+TITLE: Welcome, knowledge worker!

[[file:..][..]]

* Welcome, knowledge worker!

I hope you'll have an amazing time, do amazing work and meet amazing people.

I am a firm believer in agile movement on a solid foundation.
In an ideal world, I see people moving freely.
The static boosts the movement of the dynamic.

It is not my place to direct your movement.
But I'd like to help point your attention to the things that do not move.

I'd like to help you get started with your foundation.

* Topics: trust, value and software

I'm going to suggest you read three books:

1. a book on how to build trust,
2. a book on how to provide value to others,
3. and a book on how to build software.

Why trust, value and software, exactly?

| thing    | why                                                                                |
|----------+------------------------------------------------------------------------------------|
| trust    | because relationships founded on trust is how you make things happen in the world. |
| value    | because knowing what value you provide empowers and frees you.                     |
| software | because there are old people whose techniques you should steal.                    |

When you understand trust, value and software deeply, it's going to be easier for you to move forward.

#+begin_quote
Oh you want to learn D3.js?
You already have some foundational understanding of software.
And you know how to judge the value you provide by building something with D3.
And you have people around you that you can ask for feedback and share your work with.
#+end_quote

In short: understanding trust, value and software is a force multiplier for other things you want to learn and do.

-----

* Trust

All your relationships with other people are characterized by trust.
You trust your closest friends.
Trust makes all other things easy.
You don't have to start from scratch each time.
It's easy to work together.
It's easy to communicate.

In certain organizations, trust is substituted for domination.
You have to do what your boss says.

Actually, I lied.
Trust is a scale.
I can promise you that your domineering manager has /some/ people he trusts more than others.
Who might that be?
Watch him.
When does he listen intently?
To whom does he ask questions?
Why do you think that is?

Trust isn't objective.
Trust is deeply subjective.
And it starts low, depending on how you met a person.
Through friends, perhaps.
Perhaps as a phone call reportedly about a problem with your computer.

But.
/You can build trust./
You can give the people around you a reason to trust you.
You can choose to listen, and choose to help.

[[id:5dce2cbf-71b0-4038-ad1d-7174236fd964][Jocko Willink]] crisply describes what you can do right now to build trust:

#+begin_quote
If your boss isn't making a decision in a timely manner or providing necessary support for you and your team, don't blame the boss.
First, blame yourself.
Examine what you can do to better convey the critical information for decisions to be made and support allocated.

Leading up the chain of command requires tactful engagement with the immediate boss (or in military terms, higher headquarters) to obtain the decisions and support necessary to enable your team to accomplish its mission and ultimately win.
To do this, a leader must push situational awareness up the chain of command.
#+end_quote

If you can build relationships of trust to the people around you, you'll have an easy time getting help and feedback.

I recommend reading [[id:40f7d350-4adb-4a1c-bee8-70b38e8006c0][Extreme Ownership]] by Jocko Willink if you want to learn how to build trust.
Start with /Chapter 10: Leading Up and Down the Chain of Command/ if you're in a hurry.

* Value

I recommend reading [[id:4c96fb35-ee33-4386-b2b8-f7b80cd5d8a5][Empowered]] by [[id:45f5cc28-79f9-4a88-930f-06f77e727479][Marty Cagan]] to understand how you can judge your impact.
The thing you made, does it help people?
Was it worthwhile to build?

* Software

I recommend reading [[id:3aa87eb3-5ab3-4897-9057-fd463c8bd980][The Art of Unix Programming]] by [[id:4c29d9b7-617e-4178-83ca-e3c83cbd6e63][Eric Raymond]] to understand your options for creating software.
How are others going to interact with the thing you made?

-----

* Appendix A: journaling

When in doubt, ask yourself "what's important?" and start writing.

- Are you asking the right question?
- If it's hard, try slicing it up.
- If you dare, share what you learn with your peers.

I use journaling all the time when I want to learn something.
If you want an example, check out [[id:4291481a-e7ad-4466-b51e-53b0e35076d1][(Doom) Emacs learning journal]].

* Appendix B: more books

First --- you can safely skip these.
Don't give yourself so many moving pieces that you get confused!
No, really!
It's important to limit work in progress limited.
Don't try to learn everything at once.

more on trust & relationships:
[[id:9488732f-7ab4-4ad9-8fd5-c5c22238636e][The Courage to Be Disliked]].

more on programming:
[[id:a89b6b73-bf4b-47bf-90aa-6b8bc5af93f1][The Pragmatic Programmer]], second edition. By Dave Thomas and Andy Hunt.
Why: great read, actionable, will make your code better.

more on programming 2:
[[id:2dc52e4f-0604-4d33-a50c-1e8534266a47][Grokking Simplicity]] by Eric Normand.
Why: it introduces functional programming by focusing on what FP lets you /do/ rather than attempt to stuff abstract theory down your throat.


more on value:
[[id:dde82bbc-e4c8-49c0-b577-dba0cba0bdf7][The Beginning of Infinity]], by David Deutsch.
Why: it crisply defines what's useful to do in science.
Caveat: this one is a tough read.
Don't beat yourself up.
