:PROPERTIES:
:ID: 2c53f531-afdd-4efb-becd-f5d2f220b5ab
:END:
#+TITLE: Recursive document transformations with Pandoc and Clojure

[[file:..][..]]

Today, we're going to use Pandoc and Clojure to produce a nice EDN file with all the links from an Markdown file.

* Motivation: general tools
I strive to learn to use general tools.
I want to be able to mix and combine my existing toolbox to new problems.
To achieve that, I'm willing to sacrifice some clarity and some control.

Pandoc and Clojure are general tools.
Pandoc supports a [[https://pandoc.org/MANUAL.html#general-options][wide range of document formats]].
Clojure is a great tool for general purpose programming.

Here's a list of more specific ways of solving adjacent problems:

1. Use a markdown library API to transform a markdown document
2. Use jsoup to transform HTML directly
3. Just write hiccup instead of a text format like Markdown or Org-mode so that you can work with plain data

Specific tools are often easier to get started with than general tools.
Doing something specific is also a great way to learn.
By minimizing indirection in what you do, you minimize your chance to get lost.

That's not what we're going to do today!
Today, we're aiming for general.

Let's get to it.
* Terminology
First, let's define our language.

| Term          | Definition                                   | More details                         |
|---------------+----------------------------------------------+--------------------------------------|
| walk          | A way to transform recursive data structures | https://clojuredocs.org/clojure.walk |
| Pandoc        | Document converter                           | https://pandoc.org/                  |
| Pandoc filter | A program that can transform Pandoc JSON     | https://pandoc.org/filters.html      |
| Babashka      | Clojure runtime for scripting                | https://babashka.org/                |

Note: we could use plain Clojure instead of Babashka.
But Babashka is a good fit here because of fast startup time.
* Introduction to Pandoc
Pandoc provides a common document format abstraction, and transformation from/to a wide range of formats.
Let's look at an example.

** Converting markdown to HTML with Pandoc

Given =doc.md=:

#+INCLUDE: "doc.md" src markdown

We can call pandoc:

#+INCLUDE: "doc-html.sh" src bash

To produce =doc.html=:

#+INCLUDE: "doc.html" src html

** Converting markdown to JSON with Pandoc

Given =link.md=:

#+INCLUDE: "link.md" src markdown

We can call pandoc:

#+INCLUDE: "link-json.sh" src bash

To produce =link.json=:

#+INCLUDE: "link.json" src json

Man, that's a long line.
Here:

#+begin_src json
{
  "pandoc-api-version": [1, 22, 2],
  "meta": {},
  "blocks": [
    {
      "t": "Para",
      "c": [
        {"t": "Str", "c": "See"},
        {"t": "Space"},
        {
          "t": "Link",
          "c": [
            ["", [], []],
            [{"t": "Str", "c": "teod.eu"}],
            ["https://teod.eu", ""]
          ]
        }
      ]
    }
  ]
}
#+end_src

See?
It's just data ðŸ™‚
* Babashka as a pandoc filter
First, recap.

1. Pandoc can convert anything* to JSON
2. We can transform JSON
3. Pandoc can convert from JSON to anything*.

So, by leveraging Pandoc, we can create arbitrary transformations on anything*!

(*anything: https://pandoc.org/index.html)

So, how do we want to do this?
A Pandoc filter takes JSON on stdin and produces JSON on stdout.

We can use =jet= and =bb= do do this:

#+begin_src bash
echo '{"args": [1, 2]}' | \
    jet --from json | \
    bb '(assoc *input* :sum (reduce + (:args *input*)))' | \
    jet --to json
{"args":[1,2],"sum":0}
#+end_src

Nice!
* Implementing =rickroll.clj=
I wanted to work on the pandoc filter incrementally, writing each step.
That didn't happen.
I got in the zone, and wrote everything.
So you'll get after-the-fact commentary instead.
The source code renderer on play.teod.eu currently (2022-07-15) demands very short source code lines.
So you can view rickroll.clj as a [[file:rickroll.clj][raw file]] or [[https://github.com/teodorlu/play.teod.eu/blob/master/document-transform-pandoc-clojure/rickroll.clj][on Github]] if you'd like.
Otherwise, keep on scrolling.

Here comes a full listing for the babashka script.
We continue below the code listing!

#+BEGIN_EXPORT html
<a name="above-rickroll.clj" href="#below-rickroll.clj">Jump below rickroll.clj ðŸ‘‡</a>
#+END_EXPORT

#+INCLUDE: "rickroll.clj" src clojure

#+BEGIN_EXPORT html
<a name="below-rickroll.clj" href="#above-rickroll.clj">Jump above rickroll.clj ðŸ‘†</a>
#+END_EXPORT
* Bash wrapper: =rickroll.sh=
Pandoc's =--filter= requires /a single script/.
So here's =rickroll.sh=:

#+INCLUDE: "rickroll.sh" src bash

You can use =rickroll.sh= like this:

#+begin_src bash
./rickroll.sh < link.json
#+end_src

#+begin_src json
{
  "pandoc-api-version": [1, 22, 2],
  "meta": {},
  "blocks": [
    {
      "t": "Para",
      "c": [
        {"t": "Str", "c": "See"},
        {"t": "Space"},
        {
          "t": "Link",
          "c": [
            ["", [], []],
            [{"t": "Str", "c": "teod.eu"}],
            ["https://www.youtube.com/watch?v=dQw4w9WgXcQ", ""]
          ]
        }
      ]
    }
  ]
}
#+end_src

Look at all those closing parens! ðŸ˜„
[[https://github.com/weavejester/hiccup][Hiccup]] is quite compact when you think about it.

#+begin_src clojure
[:p "See " [:a {:href "https://www.youtube.com/watch?v=dQw4w9WgXcQ"}
            "teod.eu"]]
#+end_src
* Let's rickroll ourselves!
#+INCLUDE: "rickroll-ourselves.sh" src bash

Have a look at the result: [[file:rickroll-ourselves.html][rickroll-ourselves.html]]
* Oh, that EDN file with links. I almost forgot.
=extract_links.clj= is =rickroll.clj= with some edits:

#+INCLUDE: "extract_links.clj" src clojure

And here's how to run it:

#+INCLUDE: "extract-links.sh" src bash

, producing:

#+begin_src clojure
[{:href ".."}
 {:href "https://pandoc.org/MANUAL.html#general-options"}
 {:href "https://clojuredocs.org/clojure.walk"}
 {:href "https://pandoc.org/filters.html"}
 {:href "https://babashka.org/"}
 {:href "rickroll.clj"}
 {:href "https://github.com/teodorlu/play.teod.eu/blob/master/document-transform-pandoc-clojure/rickroll.clj"}
 {:href "https://github.com/weavejester/hiccup"}
 {:href "rick.html"}]
#+end_src

That's all for now.

ðŸ™Œ
