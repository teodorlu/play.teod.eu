:PROPERTIES:
:ID: 86c31b09-2831-4435-a73e-91db76fcbd57
:END:
#+TITLE: Bink: Bookmarks are just data

[[file:..][..]]

#+BEGIN_VERSE
<rant>
THIS PROGRAM MAY NOT WORK
THIS PROGRAM WILL CHANGE
IF THIS PROGRAM CRASHES, YOU MAY NOT RECEIVE SUPPORT
USE THIS PROGRAM AT YOUR OWN RISK
</rant>
#+END_VERSE

* Bookmarks should live in Git!
I gave up on managing bookmarks in web browsers long ago.

But I was thinking.
We're able to take care of source code.
Improve it over time.
And we've got this /amazing/ thing called /version control/.
And this other amazing thing called /data/.
So why not combine them.

Bookmarks are just data.

But!
Opening a bookmark must be nice.
Run a command, select the bookmark, open in browser.

So I made a thing.
Use it like this:

1. Run =$ bink= in a terminal
2. Select a bookmark
3. It opens in your web browser

But the bookmarks are just a bunch of EDN files you can structure yourself in =~/.config/bink/provider/=.
Here's an example:

#+begin_src clojure
;; from ~/.config/bink/provider/links.edn on my computer:
{:links [{:title "Clojure Deref" :href "https://clojure.org/news/news"}
         {:title "Clojureverse" :href "https://clojureverse.org/"}]}
#+end_src

If you want to try it out, that's awesome.

To add a bookmark, edit your link files.
You can use as many files as you want.
Just make sure the suffix is =.edn=.

Feel free to bug me about it on the [[https://clojurians.slack.com/archives/CLX41ASCS][babashka channel on the Clojurians Slack]].

Teodor (https://teod.eu)

Here's a small install script: https://github.com/teodorlu/play.teod.eu/blob/master/bink/install.sh

Or install it with bbin:

#+begin_src
$ bbin install https://play.teod.eu/bink/bink.clj
$ bink
#+end_src
* Dev journal / working notes
Feel free to ignore this part :)

Or not.
You decide.
** 2022-09-14
*** CLI draft
#+begin_src
# To open a link:
$ bink
# Select link with fzf
# Then it's opened in your browser.

# Add a link
$ bink add "Clojure Deref" https://clojure.org/news/news
#+end_src
*** Nice to have: link providers
Nice to have / later: link providers.
I could fetch links from multiple sources.
Use one source with my team at work.
Another for personal stuff.

A link provider could be an EDN file, a JSON file, an SQLite DB, an URL or a system command.

But! Let's not start there.
Or ...
It would be nice to be able to just symlink multiple files / programs into ~/.local/share/bink/providers.d/

Hmmm.
*** Config
| Path                        | Purpose                      |
|-----------------------------+------------------------------|
| =~/.config/bink/config.edn= | Bink main configuration file |
| =~/.config/bink/provider/*= | Additional link providers    |
*** Link providers
JSON file - interpret as JSON.
EDN file - interpret as EDN.

What about programs?
If they are executable, perhaps they should be run?

Perhaps an executable =links.json= should output JSON links on stdout.
ðŸ¤”
*** Link file format
EDN:

#+begin_src clojure
{:links [{:title "Clojure Deref" :href "https://clojure.org/news/news"}
         {:title "Clojureverse" :href "https://clojureverse.org/"}]}
#+end_src

JSON:

#+begin_src json
{
    "links": [
        {"title": "Clojure Deref", "href": "https://clojure.org/news/news"},
        {"title": "Clojureverse", "href": "https://clojureverse.org/"}
    ]
}
#+end_src
** 2022-09-15
*** I want a loose coupling between bink and the link providers
Idea: different providers in bink config.

Example configuration:

#+begin_src clojure
{:providers {clojure-community {:edn-file
                                {:path "~/.config/bink/provider/clojure.edn"}}
             stuff-from-work {:fn
                              (fn []
                                (cheshire.core/parse-string
                                 (slurp "https://iterb.art/data/links.json")
                                 keyword))}}}
#+end_src

But.
What do we do if loading all the links takes time?
Do we cache?
Or do we allow the slowdown?

If we select provider /first/ then select link, we might not care too much about load time.
*** I can write a bink provider for play.teod.eu
Hmm, that's actually a very good idea.

And I want to configure which browser to use
*** To configure which browser to use, is :providers a good toplevel key?
I could extend the current thing.

#+begin_src clojure
{:providers {clojure-community {:file "~/.config/bink/provider/clojure.edn"
                                :open-fn (fn [{:keys [href]}]
                                           (clojure.java.browse/browse-url href))}
             teod-play {:fn (fn []
                                (clojure.edn/read-string
                                 (slurp "https://play.teod.eu/links.edn")))
                        :open-fn (fn [{:keys [href]}]
                                   (babashka.process/process ["firefox" "-new-window" href]))}
             stuff-from-work {:fn
                              (fn []
                                (cheshire.core/parse-string
                                 (slurp "https://iterb.art/data/links.json")
                                 keyword))}}}
#+end_src
*** What about multiple providers?
1. We could mash all links into one
2. We could first select provider, then load links, then select link
*** A good next step is probably just supporting by iterbart usecase.
