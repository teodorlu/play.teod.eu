:PROPERTIES:
:ID:       519dbdd4-9894-4f79-91e5-0975c07e039d
:END:
#+title: play.teod.eu journal

[[./..][..]]

Companion to [[id:658447a3-00e6-44aa-963e-d2f5938c50d3][play.teod.eu rolling retrospective]] (link not yet working, sorry.)

| play.teod.eu journal               | temporal, dump-oriented. |
| play.teod.eu rolling retrospective | topic-oriented           |

* 2022-05-26
** From #teodor-discuss (Iterate slack)
Source: https://garasjen.slack.com/archives/C01KB5RSAU9/p1653562307600869

Hva vil jeg egentlig å få ut av en nettside?

Effektivt å skrive tekst. Kan gjøre det i vanlige tekstformater.
Frittstående sider. Løs kobling, trenger ikke samme struktur overalt.
Gjenbrukbare komponenter.
Hele greia funker som en statisk side.
Statisk html er sjekket inn i git.
Lynraske bygg.
Effektivt å jobbe med hiccup.

Effektivt å jobbe med ideer.
Effektivt å lenke mellom ideer.

Lett å få inn ting jeg har tegnet. Feks på papir, remarkable eller i figma

Twitter... Trenger jeg å tenke på det?
Kommentarer. Webmentions? Systemet jeg bruker i dag? Hacker news? Twitter?
Jeg ønsker jo å kunne diskutere ting på Twitter
Og det gir mening å ha invitasjoner til diskusjon på Twitter, samt invitasjon til å diskutere på Twitter på nettsiden.

Hva med unicad og blogging og artikler for sånt?

Approach: embed unicad I noe annet.
Approach: bygg skriving rett inn i unicad.
:thinking_face:

Hva får jeg egentlig ut av en nettside som jeg ikke får her i #teodor-discuss?
Tilgjengelig for folk utenfra
Bedre på å redigere store ting
Mer kontroll på presentasjon (også mer jobb)

Oddmund:
Har du vurdert å bare skrive nettsida di i HTML?

Det er jo cirka det jeg gjør på subcons.teod.eu. Bare via hiccup

Kan laste opp rå html også, og det funker fint.

Ting jeg ønsker å skrive om:
Ortogonalitet
Feedback-loop + API-design + hvordan ting funker
Eksempler på bruk av watchexec
Noe dataviz

@oddmunds jeg har prøvd å skrive html direkte, men det føles som å gå i gjørme. Med hiccup har jeg i alle fall en skikkelig editor. Men jeg liker bedre å redigere tekst i gode formater for tekst (feks org-mode, eller markdown, til en viss grad)

Enda en side:
Konvertering mellom Roam / html / hiccup / org-mode
Litt usikker på om jeg får til det rett i browser. Trenger kanskje en tjeneste. En backend. Med pandoc og Clojure bør det ikke være alt for vanskelig.
Men hvis jeg får opp noe sånt, kan jeg lett gå mellom formater.

Enda en side:
Signaler, starting av prosesser, stopping av prosesser. Sigterm, sigkill, sighup (?)
Kan lage en side i stedet for å lage presentasjon eller noe annet.
** Principles collected
*** Effektivt å skrive tekst. Kan gjøre det i vanlige tekstformater.
*** Frittstående sider. Løs kobling, trenger ikke samme struktur overalt.
*** Gjenbrukbare komponenter.
*** Hele greia funker som en statisk side.
*** Statisk html er sjekket inn i git.
*** Lynraske bygg.
*** Effektivt å jobbe med hiccup.
*** Effektivt å jobbe med ideer.
*** Effektivt å lenke mellom ideer.
*** (Kanskje) mulig å bruke sammen med Clerk.
** RANT
Man, I hate Mac stealing cmd+h. I want it to move stuff left in a hierarchy. But
mac steals it to hide windows.
** Outline collected
*** Ortogonalitet
*** Feedback-loop + API-design + hvordan ting funker
*** Eksempler på bruk av watchexec
*** Unix-terminalen gir deg superkrefter
relatert til ortogonalitet
relatert til watchexec
relatert til signaler, starting av prosesser, stopping av prosesser, sigterm,
sigkill, sighub
*** Noe dataviz
*** Konvertering mellom Roam / hiccup / html / org-mode
*** Signaler, starting av prosesser, stopping av prosesser. Sigterm, sigkill, sighup (?)
**** Kartlegging av interesse 2022-05-13
Kilde: https://garasjen.slack.com/archives/C2K35RDNJ/p1652440860308049

Likes: :raised_hands: * 5
***** Pitch
Idé til fagopplegg - graceful startup, graceful shutdown.
Forklare signaler (SIGTERM, SIGKILL, …), håndtering av signaler, reagere på Ctrl+C. Eventuelt også liveness og readiness i Kubernetes.
Hvis det hadde blitt arrangert noe sånt, ville du deltatt? (edited)
***** Kommentarer
Eilef - oh yes please!
Henrik - kill -9 <pid>
*** Innovasjon - som forstått gjennom bundling og unbundling
eksempler på bundling
eksempler på unbundling

verdi - arbeidsflyter
verktøy - prismodeller

ortogonalitet
** See also - curated links
I hate pure URLs without context. But ideas are meant to be understood in
context! So what's the context? "Where can we go from here"? I want the
relationships to be rich; a way of navigating in itself. An interaction mode, if
you will.
** Domains?
Ideally, I want to use cloudflare pages for this. I'd like to use Cloudflare
pages.

Buuut

That requires some major changes, some changes that might break my email setup.
So those are a bit dangerous, for now.

Options:

1. Slowly move to Cloudflare for teod.eu - but don't do anything too rash to
   early.
2. Just move over and see what happens, check whether mail breaks down or not.
3. Don't do it. Just keep the existing stuff.

If I just move over, what's the worst thing that can happen? I can (I think)
revert all changes I might be making.
** Actionables - today
1. Actually write a single piece (Org-mode), quickly compile to HTML
2. Try move that domain over. Quickly roll back if anything breaks.
** Let's try move the domain
I was able to export a zone file from Gandi, and import for Cloudflare. Not
everything worked.

| Gandi line                                                                             | What?                     | Imported?     | Reason                           |
|----------------------------------------------------------------------------------------+---------------------------+---------------+----------------------------------|
| @ 86400 IN SOA ns1.gandi.net. hostmaster.gandi.net. 1653576353 10800 3600 604800 10800 | Authority record          | Not imported. | Should't be exported.            |
| @ 1800 IN ALIAS pedantic-minsky-8c3ffb.netlify.com.                                    |                           | Not imported. | Cloudflare doesn't support ALIAS |
| @ 10800 IN MX 10 in1-smtp.messagingengine.com.                                         | Fastmail setup            | Imported.     |                                  |
| @ 10800 IN MX 20 in2-smtp.messagingengine.com.                                         | Fastmail setup            | Imported.     |                                  |
| @ 10800 IN TXT "v=spf1 include:spf.messagingengine.com ?all"                           | Fastmail setup            | Imported.     |                                  |
| b 10800 IN A 81.166.30.74                                                              | Bakkemoen server          | Imported.     |                                  |
| bakkemoen 1800 IN A 81.166.30.74                                                       | Bakkemoen server          | Imported.     |                                  |
| fm1._domainkey 1800 IN CNAME fm1.teod.eu.dkim.fmhosted.com.                            | Fastmail setup            | Imported.     |                                  |
| fm2._domainkey 1800 IN CNAME fm2.teod.eu.dkim.fmhosted.com                             | Fastmail setup            | Imported.     |                                  |
| fm3._domainkey 1800 IN CNAME fm3.teod.eu.dkim.fmhosted.com.                            | Fastmail setup            | Imported.     |                                  |
| sandbox 1800 IN CNAME determined-heyrovsky-a0a386.netlify.app.                         | Subdomain for static site | Imported.     |                                  |
| subcons 10800 IN CNAME trusting-tereshkova-c5f46b.netlify.app.                         | Subdomain for static site | Imported.     |                                  |
| workman 1800 IN CNAME jovial-jang-37d250.netlify.app.                                  | Subdomain for static site | Imported.     |                                  |
| www 1800 IN CNAME pedantic-minsky-8c3ffb.netlify.com.                                  | Subdomain for static site | Imported.     |                                  |
* 2022-05-27
** Models and metamodels
Today:

1. I want an effective makefile
2. That requires a model of how my stuff fits together
3. That model should be explicit! In data. So that I can work on it.
** Idea
Idea: =playground.edn= file in each folder. Contains information on how to
build, and what dependencies we have.
** More ideas
More ideas: Put declarative files around. =playground.edn= or something else.
Use those to build up a model of how everything fits together. From that model
(sqlite databse, plain file, etc), generate a makefile. Then we can just use the
makefile.

Consider supporting compiling to a different folder than root. That way, we can
separate cleanly between build artefacts that should be served, and all the
other stuff. But that's not for now.
** Friction
I wanted to make a new page to explore what happens to code blocks. I was ...
well, I didn't like it. There was friction. I couldn't just create a new page
and start writing. I had to think, consider, remember.

Perhaps I can create a CLI. =./playground=.

=./playground create-page explore=
** Learning from before
*** Previous structure:
**** GRATITUDE
**** MINIMALISM
**** AESTHETIC REFLECTION
*** What now?
Try to keep integrating it. Be grateful. Keep it simple. Reflect on taste.
** I found my previous slide sources
Descriptive truth, presciptive truth was on github.com/teodorlu/log:
https://github.com/teodorlu/log/tree/c7fe172064cb5448cda47abe2fb5b74d16979320/2021-06-14/iterate/slides-descriptive-prescriptive.org

Options to the max:
https://github.com/teodorlu/reflect.teod.eu/tree/2ef748baaed2e753ffbb1c4630f31f0b8d4882e9/options-to-the-max/article.org
* 2022-06-12
** Feeling the need for opt-in structure
Right now, I have multilpe separate files & folders - each separate, living on
its own.

I'm feeling that the need for playground.edn has come.

Why?

Specifically - it could deliver a title for the main index. And I could separate
drafts and incomplete work from other stuff.
** If I was going to publish a Clerk document, how would I do it?
Ideas:

1. make all of this a clojure project
2. create a clojure project for clerk notebooks in a subdirectory - then copy
   the files out on demand
   1. Could perhaps have placeholder =playground.edn= files that point to the source
   2. Or =notebooks/= could mirror "/" - so that =notebooks/pendulum.clj= is
      compiled into =pendulum/index.html=.
   3. 🤔
** Case: tags.
Problem: I want to set =feedback-interface-implementation= to "ready for feedback"

Then I totally. slow. down.

I open =feedback-interface-implementation/play.edn= and ... what do I do?
What are valid tags?
Hmm.
Perhaps ...
I could try to make an =M-x teod/play-add-relation= that searches through all the other relations, and can add something similar.

For now, manual.
** Flattening out the hierarchy
*** I moved doc/wip.org into its own wip/index.org page.
Easier to allow exploring everything.
*** doc/dump.org is going in here
It's just retrospectives and meta commentary, really.
* 2022-07-14
** Finally fixed the makefile generation, yay!
1. Don't generate Makefile from Makefile --- avoid potential race conditions.
2. Make global index.html depend explicitly on each tiny index.html

Now, a single =M-x teod-play-create-page= gives me a nice, new place to work.

😁
* 2022-07-17
Yet another :)
** I'm nearing proper link management
POC Pandoc filter -- DONE
Nice Little UI For Finding Notes -- DONE
Ideas About ID Management -- Done?
** Ideas About ID Managment
1. When creating new pages, put the ID both in the org-mode file and in the play.edn file
2. ??
3. Build a toplevel =links.edn=
4. use that toplevel links.edn to lookup IDs
** First tiny step -- Don't Produce Links That Don't Work
Meaning -- we need a Pandoc filter in between our link generation.

Meaning we need to rewrite the builds for all the articles

If we want to do that incrementally, we need to make build system configurable

Perhaps

#+begin_src clojure
{:build-system :fix-links}
#+end_src

Or

#+begin_src clojure
{:filters [:fix-links]}
#+end_src

🤔

#+begin_src clojure
{:pandoc-json-filters [:fix-links]}
#+end_src

🤔
** Letting "new links feature" be opt-in is kinda nice
Then I can experiment "off to the side" without breaking everything.
** Org-mode errors
I'm getting some weird behaviror when I'm saving my org-files.

I suspect some combination of Org-roam and editing under narrowed subtrees.

#+begin_quote
Warning (org-element-cache): org-element--cache: (nil) Cached element is incorrect in play.teod.eu-rolling-retrospective/index.org. (Cache tic up to date: "yes") Resetting.
If this warning appears regularly, please report the warning text to Org mode mailing list (M-x org-submit-bug-report).
The element is: "(paragraph (:begin 783 :end 813 :contents-begin 783 :contents-end 812 :post-blank 1 :post-affiliated 783 :mode planning :granularity element :org-element--cache-sync-key (181517 . 783) :cached t :parent (section (:begin 783 :end 813 :contents-begin 783 :contents-end 812 :robust-begin 783 :robust-end 810 :post-blank 1 :post-affiliated 783 :mode section :granularity element :org-element--cache-sync-key (901 . 1580) :cached t :parent (headline ...)))))"
 The real element is: "(paragraph (:begin 783 :end 814 :contents-begin 783 :contents-end 814 :post-blank 0 :post-affiliated 783 :mode planning :granularity element :parent (section (:begin 783 :end 814 :contents-begin 783 :contents-end 814 :robust-begin 783 :robust-end 812 :post-blank 0 :post-affiliated 783 :mode section :granularity element :parent (headline ...)))))"
 Cache around :begin:
(headline (:raw-value "Second step option: fix the links --- rewrite from id: to path: and then href: to folder" :begin 690 :end 814 :pre-blank 0 :contents-begin 783 :contents-end 814 :robust-begin 785 :robust-end 812 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 690 :title (#("Second step option: fix the links --- rewrite from id: to path: and then href: to folder" 0 88 (:parent (headline #1)))) :parent (headline (:raw-value "Org-roam id:... links are broken" :begin 478 :end 814 :pre-blank 0 :contents-begin 514 :contents-end 814 :robust-begin 516 :robust-end 812 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 478 :title (#("Org-roam id:... links are broken" 0 32 (:parent (headline #3)))) :parent (headline (:raw-value "Synthesis" :begin 341 :end 8211 :pre-blank 0 :contents-begin 353 :contents-end 8211 :robust-begin 355 :robust-end 8209 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 341 :title (#("Synthesis" 0 9 (:parent (headline #5)))) :parent (org-data (:begin 1 :contents-begin 1 :contents-end 10819 :end 10819 :robust-begin 67 :robust-end 10817 :post-blank 0 :post-affiliated 1 :path "/home/teodorlu/dev/teodorlu/play.teod.eu/play.teod.eu-rolling-retrospective/index.org" :mode org-data :ID "658447a3-00e6-44aa-963e-d2f5938c50d3" :CATEGORY "index" :parent nil :cached t :org-element--cache-sync-key (729 . -1))) :cached t :org-element--cache-sync-key (181517 . 341))) :cached t :org-element--cache-sync-key (181517 . 478))) :cached t :org-element--cache-sync-key (181517 . 690)))
(headline (:raw-value "Second step option: fix the links --- rewrite from id: to path: and then href: to folder" :begin 690 :end 814 :pre-blank 0 :contents-begin 783 :contents-end 814 :robust-begin 785 :robust-end 812 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 690 :title (#("Second step option: fix the links --- rewrite from id: to path: and then href: to folder" 0 88 (:parent (headline #1)))) :parent (headline (:raw-value "Org-roam id:... links are broken" :begin 478 :end 814 :pre-blank 0 :contents-begin 514 :contents-end 814 :robust-begin 516 :robust-end 812 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 478 :title (#("Org-roam id:... links are broken" 0 32 (:parent (headline #3)))) :parent (headline (:raw-value "Synthesis" :begin 341 :end 8211 :pre-blank 0 :contents-begin 353 :contents-end 8211 :robust-begin 355 :robust-end 8209 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 341 :title (#("Synthesis" 0 9 (:parent (headline #5)))) :parent (org-data (:begin 1 :contents-begin 1 :contents-end 10819 :end 10819 :robust-begin 67 :robust-end 10817 :post-blank 0 :post-affiliated 1 :path "/home/teodorlu/dev/teodorlu/play.teod.eu/play.teod.eu-rolling-retrospective/index.org" :mode org-data :ID "658447a3-00e6-44aa-963e-d2f5938c50d3" :CATEGORY "index" :parent nil :cached t :org-element--cache-sync-key (729 . -1))) :cached t :org-element--cache-sync-key (181517 . 341))) :cached t :org-element--cache-sync-key (181517 . 478))) :cached t :org-element--cache-sync-key (181517 . 690)))
(headline (:raw-value "CSS pain points" :begin 814 :end 2953 :pre-blank 0 :contents-begin 833 :contents-end 2953 :robust-begin 835 :robust-end 2951 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 814 :title "CSS pain points" :mode nil :granularity element :org-element--cache-sync-key (181517 . 761) :cached t :parent (headline (:raw-value "Synthesis" :begin 341 :end 8211 :pre-blank 0 :contents-begin 353 :contents-end 8211 :robust-begin 355 :robust-end 8209 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 341 :title (#("Synthesis" 0 9 (:parent (headline #3)))) :parent (org-data (:begin 1 :contents-begin 1 :contents-end 10819 :end 10819 :robust-begin 67 :robust-end 10817 :post-blank 0 :post-affiliated 1 :path "/home/teodorlu/dev/teodorlu/play.teod.eu/play.teod.eu-rolling-retrospective/index.org" :mode org-data :ID "658447a3-00e6-44aa-963e-d2f5938c50d3" :CATEGORY "index" :parent nil :cached t :org-element--cache-sync-key (729 . -1))) :cached t :org-element--cache-sync-key (181517 . 341))))) Disable showing Disable logging
#+end_quote
** Do want - a rofi launcher to quickly go to a page
possible architecture:

1. =play.teod.eu/sitemap.json=
2. =play.teod.eu/sitemap.edn=
3. =play.teod.eu/ikp.json= (iterate knowledge protocol)
3. =play.teod.eu/ikp.edn= (iterate knowledge protocol)

Providing both JSON and EDN is easy --- and then it's nice to consume from any language too.

Note, why do I even want EDN?

JSON would suffice.
But ... then I can't just use =clojure.edn/read-string=.
So yeah, I'm keeping EDN too, at least for now.
Plus keywords.
Keywords are great.
** Getting some kind of "ctrl+k" working too would be neat.
Behavior:

1. Read sitemap for current site
   1. Perhaps lazily on page load
2. Provide a nice command thing launcher for navigation
3. 🎉
** What are the steps to get those darn links working?
xx
** elisp text
#+begin_src emacs-lisp
(message "hello, there")
#+end_src

#+RESULTS:
: hello, there

#+BEGIN_SRC emacs-lisp
(progn)
(setq some-name "Dustyn")
(setq some-age 10)
(1,2, some-name, some-age)
#+END_SRC
* 2022-07-18
Kvikne, here I come! 🚂
** No live for root index
Let's fix that.

Here's a normal page:

#+begin_src makefile
# Generate target for each page
aphorisms/index.html: aphorisms/index.org
	pandoc -s --shift-heading-level-by=1 --toc --from=org+smart -H live.html -i aphorisms/index.org -o aphorisms/index.html
#+end_src

Note -H live.html.

Here's the index:

#+begin_src makefile
# Generate target for root index
index.html: index.clj aphorisms/index.html attention-design/index.html bitemporal-worldview/index.html capability-feature-assembly/index.html c-journal/index.html clojure-interactive/index.html curious/index.html discover-difference/index.html documentation/index.html document-transform-pandoc-clojure/index.html emacs/index.html feedback-interface-implementation/index.html fuse/index.html git-commit-messages/index.html grow-knowlege-together/index.html heterarchies/index.html inspiration-howto/index.html intention-relation-action/index.html interaction-value-differential/index.html interface-perception-design/index.html iterate-knowledge-archipelago/index.html journal/index.html knowledge-worker/index.html list-of-problems/index.html literature-notes/index.html lost-in-specificity/index.html maksimal-opsjonalitet/index.html many-small-functions-bad/index.html narrow-statements/index.html narrow-waist/index.html oggpo/index.html orthogonality-enables-optionality/index.html play.teod.eu-journal/index.html play.teod.eu-rolling-retrospective/index.html precise-general-novel/index.html product-for-developers/index.html purposeful-software-development/index.html rdf-intro/index.html sannhet-deskriptiv-preskriptiv/index.html shabakka/index.html software-architecture-as-language-construction/index.html software-architecture/index.html strong-relations/index.html thesis-antithesis-synthesis/index.html twitter-howto/index.html unix-signals-intro/index.html watchexec-make-dev/index.html why-dont-we-have-a-strategy/index.html wip/index.html
	./index.clj
#+end_src

Gist: just =./index.clj=.

Here's from =index.clj=:

#+begin_src clojure
(spit "index.html" (slurp (:out
                           @(p/process '[pandoc --from org+smart --to html --standalone]
                                       {:in (org-markup {:pages (pages)})}))))
#+end_src

There we go.

Observation -- we're straying a bit from single responsibility principle here.

Let's try this instead:

#+begin_src clojure
(spit "index.html" (slurp (:out
                           @(p/process '[pandoc --from org+smart -H live.html --to html --standalone]
                                       {:in (org-markup {:pages (pages)})}))))
#+end_src

That worked.
Nice!
** Language, math and programming are enabling skills, and should be treated as such
You can study the Norwegian language intensely and become a literature professor.
Digging deeply into math might allow you to understand logic and inference more deeply than with any other field.
Spending enough effort and reflection on programming and systems can give you an intuition for composition and modularity that's hard to build otherwise.

Yet

Yet, language, math and programming provide

- good value to other domains
- language, math & prog are /capabilities/ in need of problems / application.
- understand this when you bring these skills.
  - lang/math/prog as /frame/ or /lens/ that contributes value to a /problem domain/
- then, import the frame from the problem domain.
  - Many frames!
- But problem domain frame top-down, capability frame bottom up.
