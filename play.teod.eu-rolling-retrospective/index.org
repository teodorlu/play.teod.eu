:PROPERTIES:
:ID:       658447a3-00e6-44aa-963e-d2f5938c50d3
:END:
#+title: play.teod.eu rolling retrospective

[[./..][..]]

Companion to [[id:2e428a][play.teod.eu journal]] (link not yet working, sorry.)

| play.teod.eu journal               | temporal, dump-oriented. |
| play.teod.eu rolling retrospective | topic-oriented           |

* I need to "contract" / "narrow" before publishing

Problem statement --- how can I use this site to grow messy stuff AND share reasonable stuff with others?

** Early view

The stuff that's published on my site right now is a real mess.
Mess how?
In many ways.
But the big one: the ideas are intertwined.
There's coupling.
I could remove that coupling.
Or at least attempt to remove that coupling.

** 2022-07-12 says hello
At the time that I wrote the text above, everything was one big lump.

Merely splitting between "feedback welcome", "forever incomplete" and "mess" helps me A LOT personally.

* Date tagging

Problem statement --- should I encode dates (created, edited) in the metadata model?

** Early view
I want metadata for :changed and :created.
First because I want to filter / sort.
Then perhaps later because that metadata is nice to have.

** 2022-07-12 says pikaboo
Date tagging would be nice.
But by what semantics?
And why?

Reasonable question --- which vague idea was created when?
Which vague idea was edited last?
I could use OS mtime for editing.
Sync into play.edn.
Have play.edn files /partially/ generated.
Or just pull it out from source at the right time?
Do the :relations trick?
*** I really like the idea of just using file modification times.
buuut I don't think those get checked into git
*** Can I just use git blame perhaps?
ðŸ¤”

Git knows when the file was changed last
*** Outline --- on page creation + git blame
On creating a new page, write :created (now)

On creating the metadata table, file edit time by asking Git
* play.teod.eu is just some code that generates some HTML

Not more.
There's a single indirection boundary.
Information as written --- indirection --- published HTML.
And that indirection is encoded in the CLI/Makefile --- not in opaque CI.

* comment system
Option: Comments on Twitter.
Option: Comments on Hacker News.
Option: Comments embedded straight into the text - via Github pull requests.
* Cross site linking with org-roam.
So ... getting Org-roam to find links here was easy.
Just set the root dir, and add ID properties for each page that should be indexed.

Status: links are working in Emacs.
Links are /not/ working on the web.
Why?
I'm using Pandoc to parse org-mode links, and pandoc doesn't know how to handle id links.
Perhaps I can solve this myself with a filter?
Hmm.

Options:

- Work around the ID links to provide =../other-page/=-style links
- Just use the file links
  - But the plain file links won't know about which org document is the target -- which is a pain.
- Perhaps this is finally a case for a pandoc filter with babashka.

Filter architecture draft:

- Need a global links store
  - I could generate that
  - Or I could pull it out of Org-Roam
- Given that global link store, mapping for instance =658447a3-00e6-44aa-963e-d2f5938c50d3= to
  =../play.teod.eu-rolling-retrospective/=, I could simply use that global link store for rich links or post processing.
  - I would want to query links to show relations between pages
  - I would want to transform links when converting from org-mode to html

What would the "check in everything" approach mean?

1. Simply link to folders
2. Then simply manage that.

I wouldn't be able to get the nice "straight to file" Org-Roam style navigation.
But do I really need that?
* Creating new pages
Currently, I hand-roll my own new-page creation.
I could also hook my logic into Org-Roam's templating system
Details: https://github.com/org-roam/org-roam/blob/c3867619147175faf89ed8f3e90a1e67a4fd9655/doc/org-roam.org#L896
* play.teod.eu success metric: strong language
I want to use play.teod.eu to power up my language.
