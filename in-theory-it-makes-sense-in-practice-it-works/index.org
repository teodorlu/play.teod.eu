:PROPERTIES:
:ID: c9bc1684-88b0-444b-9d45-2c9cef27d0c5
:END:
#+TITLE: In theory, it makes sense; in practice, it works

[[file:..][..]]

* "In theory, this should work."

I heard this the other day:

#+begin_quote
In theory, this should work.
#+end_quote

Me: ðŸ˜±

No, =:face_screaming_in_fear:= isn't quite right, this isn't fear.
Perhaps it's anguish.
Or shame.
Or sorrow, sorrow is better.

To me, "In theory, this should work" denigrates and destroys the notion of theory.
"theory" as a notion of practice that might not work.

We have other words to denote uncertainty!

- "I think this might work"
- "I want to try this"
- "I think this solves your problem"

It's perfectly fine, very common and super useful to make the things you don't understand explicit.
You move unknown unknowns to known unknowns.

* Theory provides explanations, has reach and is hard to vary

So if theory is /not/ "practice that doesn't work", what is theory?

I propose the following:

- *A theory has explanatory power*.
  All other things being equal, a theory that explains better than a different theory is better.

- *A theory has reach*.
  A theory explains things within some domain.
  That is the /reach/ of the theory.
  All other things being equal, a theory with larger reach than a different theory is better.

- *A good theory is hard to vary*.
  If you can change arbitrary parts of your theory, and it still /holds/, the theory is too big.
  Something can probably be removed.
  And removing that thing will make the theory /better/.

* Good practice gives you the results you need

Good practice produces a result.
If that result is what you need, the practice works.

A practice is better than a different practice if it produces better results.

* Bad goals

Where do you want to go?
If you don't know, you probably won't end up there.
If you don't know where you want to end up, your goals aren't good enough.
If you don't know why you did the things you did the last two months, your goals aren't good enough.

* Bad practice

If the things you do don't get you where you want to go, you have bad practice.

* Bad theory

Is what you're doing clear?
Or is everything hard to describe?

Do you know what you did for the last two months?
Or did you get where you wanted, but you have no idea what you did?

The act of /building theory/ clears things up.
Makes things easier to understand.

Sometimes you can even apply known theory and known terminology that somebody else made.

* Good goals, then good practice, then good theory

- If you don't know where you're going, perhaps you should work on your goals.
- If you aren't getting to where you want to get, perhaps you should work on your theory.
- If you don't know what you're doing, perhaps you should work on your theory.

* Goals, practice and theory in civil engineering and software engineering

Cities need water.
From what we know about Rome's population in 200BC it would be possible to estimate a required water supply.
Aqueducts were built, and still stand, they worked.
In the middle ages, engineers understood how weight should be distributed in an arc in order to build cathedrals.
Today, we have [[https://en.wikipedia.org/wiki/Continuum_mechanics][continuum mechanics]], a theory that explains arches, and more.
Continuum mechanics lets us simulate the behavior of our arc, and observe the structural response before we build our arc:

#+begin_export html
<iframe class="youtube-video" src="https://www.youtube.com/embed/kGxmiCDU1SE" title="YouTube video player" frameborder="0" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" allowfullscreen></iframe>
#+end_export

Software engineering is a young field.
We don't yet agree on our shared foundation.
[[id:45f5cc28-79f9-4a88-930f-06f77e727479][Marty Cagan]] style product management gives one approach to goals, continuous delivery gives approach to practice, and functional programming gives one approach to theory.
But this is seen as /one approach/.
We haven't built a shared foundation, yet.

Perhaps the next 50 years of software engineering will change that?
I'm eager to find out.

â€”Teodor 2024-06-17

PS. It's okay to not know things.
It's perfectly okay.
I do /not/ want to discourage people from exploring what they don't know.
But I don't think disguising not knowing things for "theory" is an effective strategy for learning.

PPS. My notion for theory is stolen from [[id:369abfa2-8b8c-4540-958f-d0fce79f132b][David Deutsch]].
I whole-heartedly recommend reading his book [[id:dde82bbc-e4c8-49c0-b577-dba0cba0bdf7][The Beginning of Infinity]].
This guy is great at explaining things, knows quantum physics in depth and knows epistemology in depth.
He's a person worth learning from.

PPPS. Design documents and tests can be the foundation for your theory for your codebase.
They can help explain.
But if you start out by assuming they are useless, they will become useless.
If you intend to explain the codebase in the README and with tests, you need to use the README and use the tests in practice.
Re-read the README in a moment of uncertainty.
Does something need to be added?
Run and read the tests to understand how things are meant to work.
Then add tests for the new code you're adding too.
