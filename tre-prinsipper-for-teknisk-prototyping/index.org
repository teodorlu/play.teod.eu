# -*- ispell-local-dictionary: "nb_NO" -*-
:PROPERTIES:
:ID: 22b202cb-482e-4d24-bf1e-caf51c88ae89
:END:
#+TITLE: Tre prinsipper for teknisk prototyping

[[file:..][..]]

* Motivasjon
Jeg jobbet med protyping av verktøy for design av strikkeplagg for strikkedesignere på Woolit høsten 2020.
Det synes jeg var skikkelig vanskelig!

Siden 2020 har jeg fått trening i teknisk prototyping gjennom [[id:a91a46da-75f0-4a1c-8cde-5e51ad199026][Unicad]] og [[id:7cce9240-3c15-4f48-98a6-17abbb782e4d][Amedia]].
Dette er hva jeg har lært.

* Prinsipp 1: start med en hypotese om hva du skal forbedre.
Hva er det du skal forbedre?
Rettere sagt, hva er det du tror du kan forbedre?
Skriv ned det.
Det kan du bruke når du setter i gang hver dag.

Når du har gjort et stykke arbeid, kan du bruke hypotesen til å vurdere arbeidet ditt.
* Prinsipp 2: lås alle valg unntatt det du skal teste.
Trenger du noe data fra internett?
Last ned ned og hardkod json inn i appen din.
Trenger du et CLI-flagg?
Løs det med én if-setning, ikke begynn å søke etter biblioteker for parsing av CLI-argumenter.

Hypotesen din definerer hva du ønsker å oppnå.
Det er her du skal gi verdi.
Hvis hypotesen er "kan vi gjøre HOPS-CLI-et sette seg inn i?" skal du eksperimentere opplevelsen når man først setter seg inn i HOPS-CLI-et, og ignorere alt annet du kan ignorere.
* Prinsipp 3: loggfør progresjon hver dag.
Hva er din daglige rytme?
Hvordan svarer du på spørsmålet "hva er viktig i dag" hver morgen?

Ser du på trello-lappene og river deg i håret fordi noen ikke skjønner at det er vanskelig å jobbe i kodebasen din?
Stresser du over at API-et /enda/ ikke er ferdig fordi hva "ferdig" betyr sklir ut?

Jeg ønsker å jobbe med mennesker som tenker sjæl og ønsker å levere høy kvalitet.
Mitt triks for å tenke sjæl er å spørre meg selv "hva er viktig?" og tenke meg om.

Når du prototyper, leverer du kunnskap.
Mottakeren av kunnskapen er deg selv i morgen, deg selv om en uke, og teamet når du er klar for å dele det du har lært.
For å få til dette anbefaler jeg å skrive tekst.

Når du kommer på jobb om morgenen:

1. Skriv ned hypotesen.
   Hva gjenstår?
   Eller er vi i mål?
2. Hva er neste "to-timers-store utfordring" du kan gjøre?
3. Er det noe du synes er vanskelig?
   Bør du spørre om hjelp?

Og når du har kommet et stykke:

1. Hva var det du gjorde?
2. Fungerte det?
3. Hva er neste steg?

Du skriver ikke dette for andre.
Du skriver det for deg selv.
Men det er mye lettere å oppsummere for andre hva du har lært når du allerede har kontroll på hva du har gjort og konkludert med!

Og bruk et verktøy for å loggføre som funker for deg.
Jeg foretrekker plaintext i git.
Jeg har sett designere få knallbra nytte av Figma og Figjam.
Miro funker ofte bra hvis man er to eller flere.
Og produktgjengen i Iterate har stålkontroll på Notion.
* Appendix A: vi prototyper for å hypoteseteste en teori.
Teorien er hva vi tror vi kan forbedre.
Men teorien er usikker.
Hva betyr det egentlig at vi skal støtte grafnavigering i HOPS-terminalgrensesnittet?
Det er sannelig ikke godt å si når ordene står alene uten noe å støtte seg på!
Vi prototyper for å gi teorien tekstur.
Målet vårt er å gjøre teorien bedre.

[[id:369abfa2-8b8c-4540-958f-d0fce79f132b][David Deutsch]] definerer en god teori som:

1. Den forklarer noe interessant.
   På engelsk, "good explanations have reach".
   Kan du faktisk forbedre noe i produktet?
   Hvis ikke, lager du ikke en teknisk produkt-prototype!
2. Den er vanskelig å variere.
   Er det lett å erstatte teorien med noe annet?
   I Unicad har vi per 2023-03-28 en hypotese om at ingeniørselskaper er interessert i mer kontroll over beregningene sine.
   [[id:df393f09-0441-4919-aabb-a1773feb2eee][Kristian Collin Berge]] er kjapt ute med å stille spørsmål for å øke detaljgraden.
   Hvilke ingeniørselskaper?
   I hvilken kontekst?
   Hvilken rolle har personene i ingeniørselskapene, og hva er deres motivasjon?
   En ingeniør som prosjekterer bygg har kanskje mer enn nok å gjøre i hverdagen sin.
   En innovasjonsdirektør sitter kanskje og vurderer femten forskjellige initiativer, er nedlessed med ulest E-post, og har ikke ta stilling til løse ideer personen ikke kan gjøre noe konkret med.
   "ingeniørselskaper er interessert i mer kontroll over beregningene sine" kan bety mye forskjellig.
   "en byggingeniør som skal levere beregninger til rapport til tredjepart ønsker å ha én beregning som kan regne på én eller flere søyler" er spissere, og vanskeligere å variere gitt observasjoner.
* Appendix B: smale utsagn gjør det lettere å jobbe sammen
#+begin_quote
jeg ønsker å gjøre det lettere for brukere å forstå HOPS-CLI-et første gang de møter det
#+end_quote

er et smalt utsagn.
Det er presist, mulig å teste, og hjelper teamet å koordinere.

#+begin_quote
jeg ønsker å gjøre HOPS lett
#+end_quote

er et bredt, vagt utsagn.
Hva betyr det, egentlig?

Jeg vil gå så langt som å si at det siste er ubrukelig!
/Selvfølgelig/ ønsker vi at det skal være lett for noen i Iterate å bruke HOPS.
Men, for hvem?
Til hva?
Når?

[[id:93ea907e-9dcb-4c6b-af7d-d9bc22c34d57][Aforismer]] funker ikke når vi skal samle et team til å jobbe i samme retning.
Da må vi snakke om [[id:028a2171-3146-4fbc-8d5d-3209675dae8b][verdi i kontekst]]!
De generelle utsagnene dine om hva du mener er feil i verden foreslår jeg at du tar over en middag etter to øl.
