:PROPERTIES:
:ID: 26776cc4-e64d-494b-b24c-784b2c57866d
:END:
#+TITLE: Build Your Own Little Memex with Babashka

[[file:..][..]]

I believe to explore one's curiosity and to cultivate one's taste is a /good thing/ (tanks [[id:d1e0e6bd-d0ce-4880-acc7-e4935e643ebd][visa]]).

Do you enjoy expressing yourself in written text?
If that is the case, you might enjoy building a memex for your curiosity and taste.
If you /additionally/ enjoy using the [[id:6f1d8319-90b8-4006-9508-ef912fcd939b][Clojure]] programming language, consider building your own little memex with Babashka.

This idea was originally presented on [[id:cfe0cbd0-b1cb-4aeb-9322-6694bb18e2f9][babashka-conf]] 2023-07-10.

Slides: [[https://nextcloud.teod.eu/s/7NQjQbLF4D3rA3g][Build your own little memex with babashka.pdf]]

* References --- a companion to the slides and the recording.

Intended usage: keep this section next to the recording or a PDF of the slides to see where how you can learn more.

*Big thanks (incomplete list)*:
[[id:5172319f-ed46-4520-a7f2-b68359e69aca][Visakan Veerasamy]], [[id:369abfa2-8b8c-4540-958f-d0fce79f132b][David Deutsch]], [[id:a172782b-bceb-4b44-afdf-7a2348d02970][Rich Hickey]],
[[id:3331b931-9aaf-4fa4-9742-0fe2f02031e6][Ted Nelson]], [[id:07ed25bd-5f10-404c-bee4-f8c9db383bf3][Tim Berners Lee]], [[id:40e888ea-7732-41da-8776-7f506844e7f7][Ward Cunningham]], [[id:c46037a1-481e-4040-aca9-f6157f3040a4][Niklas Luhman]],
[[id:16f444c6-7311-4b95-9288-f878dd052ae4][Sindre]], Tore, [[id:e511ab7c-858e-44fc-b9b6-738e7286f221][Steinar Barstad]],
[[id:7688bf50-5c2c-49b2-9efc-fcf21a539af4][Michiel Borkent]], [[id:4ba42678-1667-426d-a07f-dfe96ab46bd2][Jack Rusher]], [[id:63922b15-01b3-4a03-afe1-18c8ef0fa8f4][Martin Kavalar]], [[id:3c798467-1dcc-480a-b38a-b9915ae0e497][Daniel Slutsky]],
[[id:15708661-258b-44fe-84b2-1aaaee815060][Alex Miller]], [[id:05a34792-5bd2-43d6-8c0f-6ca62c01b626][Christian Johansen]], [[id:8a10b234-1308-49ea-b0bf-4005adc351a2][Erik Assum]], [[id:6d36df4a-c172-460d-a9cf-8e6ee5d386c8][Magnar Sveen]], [[id:d5f62ad8-f837-4156-9444-fe9b0b157b1a][Henrik Lissner]],
[[id:43e911a6-55b4-4138-af40-5181775eca2b][Conor White-Sullivan]], [[id:cf8109c8-bed4-4b1c-bcff-a84e576d4043][Jessica Kerr]], [[id:cfe0cbd0-b1cb-4aeb-9322-6694bb18e2f9][babashka-conf]] organizers.

[interlude] *List of good things* (subjective).
(1) Knowing where your ideas come from. Influences, references. âš“

*Build your own little memex with Babashka*.
Teodor Heggelund. https://teod.eu, [[github.com/teodorlu/][@teodorlu]].

References + slides will be found here (+soon+ you're looking at it!).
https://play.teod.eu/build-your-own-little-memex-with-babasha/

Today:
(PART 1) What is a memex? A brief history of ideas.
(PART 2) How to build your own little memex with Babashka.
(Part 3) Memexes applied: a tool for exploration

** (PART 1) What is a memex? A brief history of ideas.

Information capture, information storage and information retrieval.
/[[https://en.m.wikipedia.org/wiki/As_We_May_Think][As We May Think]]/ ([[id:5b65c3e9-2c3c-4718-96ea-12fee228e1c4][Vannevar Bush]], 1945).

Pieces of paper linking to pieces of paper.
[[id:c46037a1-481e-4040-aca9-f6157f3040a4][Niklas Luhman]]. Slipboxes, [[https://en.wikipedia.org/wiki/Zettelkasten][Zettelkasten]].
1952-

Virtual pieces of paper linking to other virtual pieces of paper on a computer.
[[id:3331b931-9aaf-4fa4-9742-0fe2f02031e6][Ted Nelson]], [[https://en.wikipedia.org/wiki/Hypertext][Hypertext]], 1963.

Virtual pieces of paper linking to other virtual pieces of paper on a network describing physics experiments on a network of computers at [[https://en.wikipedia.org/wiki/CERN][CERN]].
[[id:07ed25bd-5f10-404c-bee4-f8c9db383bf3][Tim Berners Lee]], 1990.
[[https://en.wikipedia.org/wiki/HTTP][HTTP]] and the [[https://en.wikipedia.org/wiki/Internet][Internet]].

/but, do you really want to write =<!doctype html><html><head><title>Build yourself a little memex with Babashka ...= by hand?

Emerging tools for thought enable frictionless capture and frictionless linking under the label of /Personal knowledge management/.
[[https://en.wikipedia.org/wiki/Org-mode][Org-mode]] (2003), [[https://en.wikipedia.org/wiki/TiddlyWiki][TiddlyWiki]] (2004), [[id:ea364f64-1662-411d-a52e-5aa552ce45e4][Roam Research]] (2019?), [[id:5f3cf403-db0c-4d7d-8001-58ff62c343b7][Org-roam]] (2020?).

I want more!
In addition to frictionless capture and frictionless linking, I want frictionless sharing and frictionless extension with code.
Let's use the web, files and [[id:5345d063-8018-4bde-8574-8ab9df27f479][Babashka]] to move from personal to /collective/ knowledge management!

But the future is already here.
Blogs, newsletters, Wikipedia and [[id:b7518497-f161-498b-a670-c74ba7e8b4b4][Clojure Deref]] are already memexes.
Clojure deref is a memex:

| memex function        | clojure-deref mechanism       |
|-----------------------+-------------------------------|
| information capture   | [[id:15708661-258b-44fe-84b2-1aaaee815060][Alex Miller]] collects content  |
| information storage   | https://clojure.org/news/news |
| information retrieval | people read & watch content   |

*Prior work for a babashka memex*.
I started out with an [[id:5f3cf403-db0c-4d7d-8001-58ff62c343b7][Org-roam]] system.
Org-Roam is built on [[id:4291481a-e7ad-4466-b51e-53b0e35076d1][Emacs]] and [[id:4e53b86e-ee35-42d7-bf1f-f325dc8355fc][Emacs Lisp]].

Then I built [[id:0c9bef25-85ef-48e8-b4fd-d60160f177ec][play.teod.eu]] on that Org-roam foundation.
A generated makefile to build the pages.
[[id:8ebac1d6-a7e8-4556-a483-a1b1c11f832d][Pandoc]] for converting documents to HTML and resolving links to slugs.
[[id:5345d063-8018-4bde-8574-8ab9df27f479][Babashka]] to stitch it all together.
But this system is too complex and has too many dependenceies.
I wouldn't recommend this architecture to others who are just starting out.

*Desired memex properties* (subjective):

1. Memex is built out of simple pieces
2. Memex supports multiple source formats: Org-mode, Markdown, Clojure namespaces, ...
3. Memex functionality can be extended with Clojure
4. Nice editor integrations are provided: VSCode, Emacs, ...

[interlude] *List of good things* (subjective).
(1) References. âš“
(2) Trees. ðŸŒ²
(3) Moving water. ðŸŒŠ

** (PART 2) How to build your own little memex with Babashka

*Memex operations*:

#+begin_src clojure
(make-doc memex uuid slug title)
(make-link memex uuid)
(docs memex)
(->html-files memex)
#+end_src

*A memex architecture*. Layers:

1. Editor plugins: VSCode, Emacs, ...
   Editor plugins shell out to a babashka memex CLI.
2. Babashka memex CLI calls babashka memex lib.
3. Babashka memex lib uses [[id:8ebac1d6-a7e8-4556-a483-a1b1c11f832d][Pandoc]] for document conversion.
   Memex lib works on plaintext files on disk.
4. Plaintext files are in different formats:
   org-mode, markdown, asciidoc, clojure namespace with markdown, ...

*What I'm working on*

#+begin_src
experimental_memex/
  api.clj       ; ~100 lines, heavily commented
  contrib.clj   ; Quickly collect ideas, append-only. Empty, as of 2023-06-14
  cli.clj       ; A babashka CLI. Empty, as of 2023-06-14.
#+end_src

*demo.*
See the old, complex system in action.
The new, simple system doesn't work yet.
Contributions welcome, beta testers welcome.

[interlude] *List of good things* (subjective).
(1) References. âš“
(2) Trees. ðŸŒ²
(3) Moving water. ðŸŒŠ
(4) Exploring your curiosity. ðŸ¤”
(5) Cultivating your taste ðŸ–¼

** (PART 3) Memexes applied: a tool for exploration.

What are you curious about?

What's good?
What do you like?

Give it a title.
Put it in your memex.
Start exploring!

Want to build
a babashka toolkit
for building memexes
together?
Join [[https://clojurians.slack.com/archives/C05C7FWTF3K][#memexes]] on [[id:8638f5d6-bc22-4f10-a457-ab388c22128b][the Clojurians Slack]]!
(renamed from =#little-memexes=)

This talk focused on /theory building/.
Up next, [[id:7688bf50-5c2c-49b2-9efc-fcf21a539af4][Michiel Borkent]] will tackle theory /and/ practice in growing the Babashka ecosystem.

*Thank you!*
Organizers (Paulus, Agatha and Paulus) and sponsors (Pitch, Doctronic, Scarlet, Juxt): you made this happen.
Clojure community: You're awesome.
borkdude: for infinite patience with Neil pull requests.

[[https://github.com/teodorlu/][@teodorlu (Github)]], [[https://twitter.com/TeodorHeggelund][@TeodorHeggelund (Twitter)]],
[[https://clojurians.slack.com/archives/C05C7FWTF3K][#memexes]] on [[id:8638f5d6-bc22-4f10-a457-ab388c22128b][the Clojurians Slack]]
(renamed from =#little-memexes=),
https://teod.eu/

** (APPENDIX) Recommended reading.

Do you want to dig /even deeper/?
Here are some threads you might take a bite of:

1. The books [[id:57341ad1-065a-4652-979d-61887803aabf][friendly ambitious nerd]] and [[id:1d59f7de-5ed3-4fc8-ba03-e9af70a97a45][introspect]] by [[id:5172319f-ed46-4520-a7f2-b68359e69aca][Visakan Veerasamy]].
   What if we actively explore our curisosity and cultivate our taste in practice?
   These books give a perspective.
2. The book [[id:dde82bbc-e4c8-49c0-b577-dba0cba0bdf7][The Beginning of Infinity]] by [[id:369abfa2-8b8c-4540-958f-d0fce79f132b][David Deutsch]].
   Deutsch gives the best definition of /theory/ that I've seen.
   A good theory explains things well, and a good theory is hard to vary.
   I believe software engineering and product management should be viewed as disciplines for theory building.
3. The essay [[id:44a0ce6d-f13e-4dc1-a5cc-3c820b215769][Programming as Theory Building]] by [[id:5743c6b5-07b2-4a6f-b91f-8b79b4f75fad][Peter Naur]].
4. The talk [[id:9349d376-d5ee-458b-884c-b35cce2aa296][The Origins of Opera and the Future of Programming]] by [[id:cf8109c8-bed4-4b1c-bcff-a84e576d4043][Jessica Kerr]].
   Jessica


* please ignore --- early notes

You probably don't want to read the things below this line.
It contains early drafts and early outlines that didn't make it into the talk, drafts for the conference proposal, etc.

** Script for demo during presentation

1. Demonstrate old, complicated system

   1. Create a new page for Niklas Luhman (niklas-luhman) (workspace 2)

   2. Refer to him as

      #+begin_quote
      Sociologist, worked with linked data before computers
      #+end_quote

   3. Link to [[id:c46037a1-481e-4040-aca9-f6157f3040a4][Niklas Luhman]] from this page

2. Open new, experimental system

   1. https://github.com/teodorlu/lemex.experimental/settings

   2. Change visibility to public


** proposal notes 2
*Literature review.*

- memex - as we may think
  https://www.theatlantic.com/magazine/archive/1945/07/as-we-may-think/303881/
- the medium is the message
  https://en.wikipedia.org/wiki/The_medium_is_the_message
- hypertext
- moldable tools
  - stop writing dead programs
    https://www.youtube.com/watch?v=8Ab3ArE8W3s
- The Clojure ethos for simple tools
  - programming with hand tools
  - running with scissors

*Time for doing.*

- https://play.teod.eu/
  - scicloj visual tools presentation
    https://www.youtube.com/watch?time_continue=616&v=JSMcK5strRo&embeds_euri=https%3A%2F%2Fplay.teod.eu%2F&source_ve_path=MjM4NTE&feature=emb_title

*Key ideas.*

1. Moldable message, moldable medium, moldbable tools.
   Live creation.

*Talk outline.*
Note: I expect that I'll need to cut scope to stick to 20 minutes, but I think I'll keep the rough 3 part outline.

1. Part one: Tools for thinking and the web for sharing.
2. Part two: My learning practice
   1. Share how I approach learning a new topic
      1. Exploring my curiosity
      2. Making that curiosity explicit, and making it stick.
      3. Sticky application: journaling.
      4. Sticky application: contributing to open source (optionally what I've learned from contributing to Neil)
3. Part three: Build Your Own Little Memex with Babashka
   1. Show how Clojure programmers can currently leverage Babashka and Pandoc for building and sharing their knowledge.
   2. Motivate /why/
   3. Invite collaborators for writing clojure+babashka libraries for making this happen.
   4. Towards a shared Clojure memex composed of tiny personal islands

*Intended talk outcomes.*

1. Audience considers, perhaps /wants/ to use Babashka to learn & share on the internet
2. Audience sees how to make this happen using tools that already exists
3. Audience members may consider contributing to an effort / to libraries that make it easier for Clojure programmers
   to build their own little memex with babashka on the Internet

** talk proposal to babashka conf

In May 2022, I decided that I wanted to build my own playful place on the internet.
https://play.teod.eu/ was born.
I wanted to trust my own choices completely, and make every decision according to my own sense of aesthetics.
My previous web site had collapsed under its own weight, and could no longer build, becase of breaking changes in some packages that I used.

I had previously gotten interested in the personal knowledge management movement, primarily Roam Research.
I wanted the best parts of Roam with publishing to the web.
But I wanted total control.
For a time, I explored exporting from Roam to HTML.
But I quickly realized that while I loved using Roam's outlining, it didn't give me the control I wanted for the web.

A year ago, this effort felt like madness.
Today, I feel like it's one of the better decisions I've made in my life.
Counted today, I've got 12900 lines of org-mode content:

#+begin_src bash
$ cd ~/dev/teodorlu/play.teod.eu
$ find . -iname '*.org' | xargs cat | wc -l
12900
#+end_src

In comparison, my last site got less content:

#+begin_src bash
$ cd ../teodorheggelund.com
$ find . -iname '*.org' | xargs cat | wc -l
1476
#+end_src

I sometimes quote stuff from others, and sometimes copy things around.
But I'd guess about 80 % of it is words I've written.
So something has worked out.

I want to:

1. Share my motivation for writing on the web
2. Share what "clicked" for me, and explore why I've written about 8 times as much content as I ever wrote on my old site.
3. Share my efforts to pull out some code that can be reused, and how that's going.

*** key ideas

applied curiosity: my motivation for writing.

charity, grace and joy: sharing my work with others, and how that's going.

Other people are curious too!
But the world is filled with too much information, so why should you add any more?
And /how/ should you share your work with others?
My best bet per 2023-04-22: structure your work as /narrow theories/.
In Clojure, we have a culture for writing narrow libraries.
A narrow library solves one thing well with minimal dependencies, and minimal impact on your code.
I want to argue that the same goes for knowledge.
A good article presents and

TODO

** reference collection
copy-pasted things from other places
*** copied from my personal journal
From [[id:bd776ab0-d687-4f16-b66d-d03c86de2a2e][Teodor's public-personal journal]], 2023-04-22
**** the memex is here: it is the world wide web
1. information deserves to be free
2. put knowledge in bite-sized definitions (theories) + motivation about why one should care about this
3. compose bite-sized definitions with playlists -- a playlist is an ordered list of links

Done!

Q: what's the right interface for making microtheories?

Q: what's the right interface for making knowledge playlists?

Microtheories need to be good explanations.
Examples of good explanations:

- https://snapshots.nextjournal.com/clerk-demo/build/f8112d44fa742cd0913dcbd370919eca249cbcd9/notebooks/rule_30.html
- https://www.youtube.com/watch?v=r6sGWTCMz2k&t=19s
**** it's worthwhile to build your own little memex
a "little memex" is your own corner of knowledge.
you curate the index.
you create and link your nodes.
you can refer to and build on other memexes, but the act building the memex is the reward in itself.
**** your memex should live on the web
microtheories deserve its own URL.
others should be able to leverage your [[id:8881d1fb-f3d2-4e3a-9fd8-1c42de66a31e][little memex]].
**** your memex is composed of microtheories and knowledge playlists
a [[id:2628579d-9108-4268-9fab-cf0faffb7191][microtheory]] is a bite-sided deinfition, and motivation for why it matters.

a [[id:30253e9f-4247-4a36-8876-b2a7402d2e1e][knowledge playlist]] is an ordered list of microtheories.
**** the act of building your own little memex is to explore your curiosity and journal about your experience.
1. what are you curious about?
   1. write that question down.
   2. Breathe!
2. find /an answer/
   1. write that answer down.
   2. Breathe!
3. and /an action/
   1. write that action down.
   2. Breathe!
4. Listen to yourself.
   1. Breathe.
   2. Do you want to do the action?
   3. if yes, consider doing it.

Go!
**** build your own little memex with babashka
yes!
