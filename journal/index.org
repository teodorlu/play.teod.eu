#+title: My public journal
#+OPTIONS: ^:nil

[[./..][..]]

Q: Hey! Should I read this?

A: Perhaps not.
Perhaps.
I use this page as a low-filter, low-threshold way to get ideas out.
Capture ideas, incomplete as they are.
Growth and nurturing is a separate process.
Filtering, curating, organizing --- that's for later.
The reading experience might feel like a stream-of-consciousness endeavor --- with less flow, less feelings, less poetic content.
In other words, messy, without the good sides of messy.
Still, I choose to make this public, because I believe public should be the norm, not the exception.

🐉

* 2022-06-23
** On product and indirection.
I feel shackled by pressure for specificity.
Always be specific.
Specific is better.
Don't be vague.

Specificity expels indirection.
Indirection is core to design.

If we lazer-focus on the specific, we'll ignore problems with a longer feedback
cycle time than some arbitrary limit.
** Emacs ⟂ Product
Statement: "don't build something for yourself -- you'll ignore users"

Response: "no -- DO build product for yourself -- but design in the flexibility as indirection.
Don't force your users into your workflow.
Doing it for yourself is not workflow design - it's capability design."

By building in flexibility --- indirection --- at the right layer, we decouple the product, and give ourselves leverage.
** On fun
I'm better when I have fun.

I have fun when I build stuff for myself /and/ others.

∴ I should build stuff for myself.
** Fully integrated feedback loops
Commonly discussed feedback loops:

1. Cycle time for recompilation
2. Cycle time for running the tests
3. Cycle time for a deploy

Uncommonly discussed feedback loops:

1. Idea-to-sharable-paper
2. Idea-to-team

* 2022-06-24
** Pandoc code blocks
(moved from separate page)

We explore how Pandoc supports embedded code.

We can write Clojure:

#+begin_src clojure
(defn act [& commands]
  ;; code
  )
#+end_src

Or Python:

#+begin_src python
def act(*commands):
    # code
    pass
#+end_src

Or even javascript:

#+begin_src javascript
function act(commands...) {
    // code
}
#+end_src
* 2022-06-25
Another morning.
** I want trailing whitespace.
Possible solutions:

1. Find org-mode native solution
2. Lol, I can just use a big verse.
   Problem solved.
   See the bottom of this file.
** What about tags?
Outcome - less messy front page.

Right now we've got this:

#+begin_quote
Intent: bring ideas to life. Discuss, sharpen, play.

Status: very much work in progress. Please advance at your own peril.

Pages:

- aphorisms
- emacs
- feedback-loops-api-design-how-it-works
- hourglass-architecture
- journal
- knowledge-worker
- opt-in-hierarchy
- options-to-the-max
- orthogonality-enables-optionality
- product-for-developers
- truth-descriptive-prescriptive
- unix-signals-crash-course
- website-so-what

Possible next steps:

- Write real content
#+end_quote

Possible improvements:

1. Get real title out, don't use file name as link name.
2. Separate into sections with tags
   1. "Quite finished stuff" up top
   2. Then categorized content
   3. Then "draft" content
   4. Then untagged pages.
3. Considerations
   1. Perhaps hide untagged content
   2. Perhaps introduce a tag for content that should not be indexed
      1. Or just ignore content without a =play.edn= file?
** Migration path - opt in.
Backwards compatible path - existing behavior prevails, title is "settable" from
play.edn.
** Concern - performance.
The root HTML file will now depend on all the =play.edn= files.
Perhaps use SQLite for caching?
Not now.
I want good performance under scale.
Performance is important.
I can just opt for manual indexing if the need arises.
** Implementation path
Outcome - better titles.
Order.
First create a =play.edn= file manually.
Then create the proper title for that file.
Run =index.clj= by hand.
** On reactivity, speed and whole-system changes
Dump:

1. Having a fast Makefile is super nice for when I'm working on a single piece of content.
2. Just rerunning the whole system is preferable when I'm changing the system.
   Also keeping track of changes at the same time is probably not required.
3. When I'm changing the whole system, I don't really want a file watcher.
   I'd rather apply the change manually.

So ...

I'd like a =teod/apply-on-save-mode=.

Perhaps I made it work?

Or?

Nope. Back to manual teod/apply it is.
* 2022-06-26
Morning / afternoon / whatever.

🤠
** Retrospective - play.teod.eu
How are we coming along?

1. I like working with Babashka
2. But the current process of multiple "thingies" is getting painful
   1. Perhaps I need to consolidate into a single =play.clj= script with a CLI.
3. Tags are nice
   1. It's nice to always think outcome.
      What do we want to achieve right now?

Next steps?

1. Have the =page= command automatically categorize stuff as "don't mind me"
2. Group the remaining English content
3. I kinda wanna explore SQLite
4. I wanna try out portal
5. Do I want to be able to run my stuff with both JVM Clojure and Babashka?
** Current pages
| Page                                                         | Category        | aka          |
|--------------------------------------------------------------+-----------------+--------------|
| https://play.teod.eu/emacs/                                  | Rambling        |              |
| https://play.teod.eu/aphorisms/                              | Page            |              |
| https://play.teod.eu/feedback-loops-api-design-how-it-works/ | Article draft   |              |
| https://play.teod.eu/hourglass-architecture/                 | Ideas & capture | Narrow waist |
| https://play.teod.eu/opt-in-hierarchies/                     | Ideas & capture |              |
| https://play.teod.eu/orthogonality-enables-optionality/      | Article draft   |              |
| https://play.teod.eu/product-for-developers/                 | Article draft   |              |
| https://play.teod.eu/journal/                                | Rambling        |              |
| https://play.teod.eu/unix-signals-crash-course/              | Article draft   |              |
| https://play.teod.eu/knowledge-worker/                       | Article draft   |              |

How do we tag?

By form:

| :form :rambling |
| :form :article  |
| :form :explore  |
| :form :unknown  |

By readiness:

| :readiness :in-progress |
| :readiness :published   |

By language:

| :lang :no |
| :lang :en |
** Batch editing tags?
Dump -

distributed =${ARTICLE}/play.edn= files are "near" to the article (nice), but tedious to batch edit

batch editing is nice in a table

A normalized model is EAV.

EAV example:

#+begin_src
:id "emacs" :title "(Doom) Emacs learning journal"
:id "emacs" :form :rambling
:id "emacs" :readiness :in-progress
#+end_src

What are nice ways of batch editing?

    One big text file
    Excel table
    SQLite?

How should lines be deleted?

    In Dired, simply =d= the line, then =x= to apply with confirmation
    In Magit, =c c= to commit, =C-c C-c= to apply

I could simply try dumping all the data into SQLite and see how that works out.

I have:

    Metadata per page
    some pages

So - simple, flat model.

I could build

    Files -> SQLite
    SQLite -> files

Do I want "apply everything" or "apply partial"?

I could implement "apply everything" in terms of "apply partial"

    First delete all the =play.edn= files
    Then apply partial
    And confirm changes in Git.
** I can use =play.edn= to ensure link integrity
#+begin_verse
Idea
    play.edn is a module declaration
    it declares dependencies
       And binds them to targets
        Maps to root.
    Challenge - link resolution.
        Do I need a redirect "service"?
            Yeah, perhaps I can use redirects.
            🤔
        I thought I needed magic to rewrite links to target
            But I can generate a companion link site
                "app"
                    ?link=LINK_ID that redirects
#+end_verse
** =./play= API draft
#+begin_src
$ ./play2.clj relations :from :files :to :lines
:id "emacs" :title "(Doom) Emacs learning journal" :form :rambling :readiness :in-progress
:id "feedback-design-impl" :title "Feedback loops, API design and how stuff works"
...
#+end_src
** Retrospective
Created the lines mode - and more.

| Mode    | Read? | Write? | Purpose                                       |
|---------+-------+--------+-----------------------------------------------|
| :files  | y     | y      | play.edn files is the main storage            |
| :lines  | y     | y      | lines give a concise overview                 |
| :table  | y     | y      | table is great for batch editing              |
| :pretty | n     | y      | :to :pretty is great when devleoping a reader |

This almost looks like an hourglass architecture :)

relations interface in the middle.

I'm happy with the design.
* 2022-06-28
** Possible talk - dynamic programming
idea - dynaimc programming isn't lack of types.
Dynamic programming is options to do flexible stuff.

Option - work on data structures rather than types.
    XML - static types for everything, or a dynamic tree?
    JSON - types for everything?
Alternative formulation - serialization for free

Option - dynamic runtime.
    Dynamic languages often support interpretation / dynamic recompilation

Option - extend language when required.
    Embedded DSLs are just data
        (Or macros, but macros can be complex)

Option - use schemas directly for validation rather than types

Examples?
    Hmm
    Python?
    Clojure?
    Javascript?

* 2022-07-02
** Braindump / thought stack
- Establish iterate knowledge archipelago to improve long-term internal communication
- Provide context for introducing Clojure
- Provide context for introducing RDF
- Build tools to redefine Engineering
- Build argument for why engineering companies should lean into computational engineering

-----

I want to give Ole Jacob a big JSON file he can build UIs on top of

=play.teod.eu/iterate-knowledge-archipelago.json=

rich entity semantics - "url" "title"

& filter on tags

-----

I want to get more info when I generate pages.
This should be possible:

  ./play.clj page compuational-engineering :title "Computational Engineering"

And it should also write :author-url and :created-at.
** I'd like to avoid the watchbuild files
Are they even required any more?

I haven't used any of them in a long time

Makefile works well

Action: delete em.
** I deleted the watchbuild files
☀️
** Docs fanout factor
For me:

| Written for myself | 10 |
| Shared with others |  1 |

Why?

    Working on my own ideas / perception / intent is something I'd like to do with an internal feedback loop.

Why?

    Hmm, good question.

    Well, easy answer. Because I don't get anywhere as fast ahead through conversation with others.

Why?

    No, actually, that's not it.

    And amount of written text is the wrong metric

    Effort is the right metric

    For effort, it's perhaps 50/50

    50 % internal

    50 % external.

    I prefer writing to thinking when iterating internally.

    I prefer speaking to writing in conversation

        I think? I'm not quite sure.
** I dislike IDEs because in IDEs, plain text and prose is second class
That basically means they are missing Org-mode.

So perhaps "I dislike anything that doesn't have Org-mode" is better.

😆
** Observation: sometimes vague and general is required
#+begin_quote
I feel shackled by pressure for specificity.
Always be specific.
Specific is better.
Don't be vague.
#+end_quote

This feels like a statement that sometimes a bad abstraction is required to get to a good abstraction.
Also, I hate being forced to do stuff.
** Emacs is a tool for research that happens to work for code too
* Trailing whitespace
#+begin_verse




















#+end_verse

I like trailing whitespace - so that I can center content vertically when
writing, and avoid it moving around :)
